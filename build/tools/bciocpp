#!/bin/bash

BCIO_BIN_INSTALL_DIR=`dirname $0`
if [ "${BCIO_BIN_INSTALL_DIR}" == "." ]; then
  BCIO_BIN_INSTALL_DIR=`pwd`
fi
BCIO_INSTALL_DIR=`dirname ${BCIO_BIN_INSTALL_DIR}`
if [ -x "/work/bc_install/bc/build/programs/bcio-abigen/bcio-abigen" ]; then
    ABIGEN="/work/bc_install/bc/build/programs/bcio-abigen/bcio-abigen"
elif [ -x "${BCIO_INSTALL_DIR}/bin/bcio-abigen" ]; then
    ABIGEN=${BCIO_INSTALL_DIR}/bin/bcio-abigen
fi
if [ -x "/work/bc_install/bc/build/externals/binaryen/bin/bcio-s2wasm" ]; then
    BCIO_S2WASM="/work/bc_install/bc/build/externals/binaryen/bin/bcio-s2wasm"
elif [ -x "${BCIO_INSTALL_DIR}/bin/bcio-s2wasm" ]; then
    BCIO_S2WASM="${BCIO_INSTALL_DIR}/bin/bcio-s2wasm"
else
    echo "bcio-s2wasm not found either built or installed"
    exit 12
fi
if [ -x "/work/bc_install/bc/build/libraries/wasm-jit/Source/Programs/bcio-wast2wasm" ]; then
    BCIO_WAST2WASM="/work/bc_install/bc/build/libraries/wasm-jit/Source/Programs/bcio-wast2wasm"
elif [ -x "${BCIO_INSTALL_DIR}/bin/bcio-wast2wasm" ]; then
    BCIO_WAST2WASM="${BCIO_INSTALL_DIR}/bin/bcio-wast2wasm"
else
    echo "bcio-wast2wasm not found either built or installed"
    exit 14
fi
BOOST_INCLUDE_DIR=/root/opt/boost/include
function copy_skeleton {
    set -e
    cp -r "${BCIO_INSTALL_DIR}/share/bcio/skeleton/." $newname

    for file in $(find ./$newname -name 'skeleton.*')
    do
        newfile=`echo $file | sed 's/skeleton\./'"$newname"'./'`
#        echo mv "${file}" "${newfile}"
        mv "${file}" "${newfile}"
        exp=s/skeleton/${newname}/g
#        echo sed -i ${exp}  ${newfile}
        sed ${exp}  ${newfile} > ${newfile}1
        mv ${newfile}1 ${newfile}
    done
    echo "created $newname from skeleton"
    set +e
}

function build_contract {
    set -e
    workdir=`mktemp -d`

    if [[ ${VERBOSE} == "1" ]]; then
       PRINT_CMDS="set -x"
    fi

    ($PRINT_CMDS; mkdir $workdir/built)

    for file in $@; do
        name=`basename $file`
        filePath=`dirname $file`

        ($PRINT_CMDS; /root/opt/wasm/bin/clang -emit-llvm -O3 --std=c++14 --target=wasm32 -nostdinc \
                                   -DBOOST_DISABLE_ASSERTS -DBOOST_EXCEPTION_DISABLE \
                                   -nostdlib -nostdlibinc -ffreestanding -nostdlib \
                                   -fno-threadsafe-statics -fno-rtti -fno-exceptions \
                                   -I /work/bc_install/bc/build/contracts \
                                   -I /work/bc_install/bc/contracts \
                                   -I /work/bc_install/bc/contracts/libc++/upstream/include \
                                   -I /work/bc_install/bc/contracts/musl/upstream/include \
                                   -I /work/bc_install/bc/externals/magic_get/include \
                                   -I ${BCIO_INSTALL_DIR}/include \
                                   -I${BCIO_INSTALL_DIR}/include/libc++/upstream/include \
                                   -I${BCIO_INSTALL_DIR}/include/musl/upstream/include \
                                   -I${BOOST_INCLUDE_DIR} \
                                   -I $filePath \
                                   ${BCIOCPP_CFLAGS} \
                                   -c $file -o $workdir/built/$name
        )

    done

    declare -a possible_libs=("/work/bc_install/bc/build/contracts/bciolib/bciolib.bc"
                              "/work/bc_install/bc/build/contracts/libc++/libc++.bc"
                              "/work/bc_install/bc/build/contracts/musl/libc.bc"
                              "${BCIO_INSTALL_DIR}/usr/share/bcio/contractsdk/lib/bciolib.bc"
                              "${BCIO_INSTALL_DIR}/usr/share/bcio/contractsdk/lib/libc++.bc"
                              "${BCIO_INSTALL_DIR}/usr/share/bcio/contractsdk/lib/libc.bc")
    declare libs=""
    for lib in "${possible_libs[@]}"; do
        if [ -f "${lib}" ]; then
            libs="${libs} ${lib}"
        fi
    done
    ($PRINT_CMDS; /root/opt/wasm/bin/llvm-link -only-needed -o $workdir/linked.bc $workdir/built/* ${libs})
    ($PRINT_CMDS; /root/opt/wasm/bin/llc -thread-model=single --asm-verbose=false -o $workdir/assembly.s $workdir/linked.bc)
    ($PRINT_CMDS; ${BCIO_S2WASM} -o $outname -s 16384 $workdir/assembly.s)
    ($PRINT_CMDS; ${BCIO_WAST2WASM} $outname ${outname%.*}.wasm -n)

    ($PRINT_CMDS; rm -rf $workdir)
    set +e
}

function generate_abi {

    if [[ ! -e "$1" ]]; then
        echo "You must specify a file"
        exit 1
    fi
    
    context_folder=$(cd "$(dirname "$1")" ; pwd -P)
    
    ${ABIGEN} -extra-arg=-c -extra-arg=--std=c++14 -extra-arg=--target=wasm32 \
        -extra-arg=-nostdinc -extra-arg=-nostdinc++ -extra-arg=-DABIGEN \
        -extra-arg=-I/work/bc_install/bc/contracts \
        -extra-arg=-I/work/bc_install/bc/build/contracts \
        -extra-arg=-I/work/bc_install/bc/contracts/libc++/upstream/include \
        -extra-arg=-I/work/bc_install/bc/contracts/musl/upstream/include \
        -extra-arg=-I/work/bc_install/bc/externals/magic_get/include \
        -extra-arg=-I${BCIO_INSTALL_DIR}/include/libc++/upstream/include \
        -extra-arg=-I${BCIO_INSTALL_DIR}/include/musl/upstream/include \
        -extra-arg=-I${BOOST_INCLUDE_DIR} \
        -extra-arg=${BCIOCPP_CFLAGS}  \
        -extra-arg=-I${BCIO_INSTALL_DIR}/include -extra-arg=-I$context_folder \
        -extra-arg=-fparse-all-comments -destination-file=${outname} -verbose=0 \
        -context=$context_folder $1 --

    if [ "$?" -ne 0 ]; then
        exit 1
    fi    

    echo "Generated ${outname} ..."
}

function print_help {
    echo "Usage: $0 -o output.wast contract.cpp [other.cpp ...]"
    echo "       OR"
    echo "       $0 -n mycontract"
    echo "       OR"
    echo "       $0 -g contract.abi types.hpp"
    echo
    echo "Options:"
    echo "   -n | --newcontract [name]"
    echo "      Create a new contract in the [name] folder, based on the example contract"
    echo "   OR"
    echo "   -o | --outname [output.wast] [input.cpp ...]"
    echo "      Generate the wast output file based on input cpp files"
    echo "      The wasm output will also be created as output.wasm"
    echo "   OR"
    echo "   -g | --genabi contract.abi types.hpp"
    echo "      Generate the ABI specification file [EXPERIMENTAL]"
}

function print_deprecation_notice {
    echo -e "\033[0;33mWARNING: this tool is deprecated and will be removed in a future release\033[0m" 1>&2
    echo -e "\033[0;33mPlease consider using the BCIO.CDT (https://github.com/BCIO/bcio.cdt/)\033[0m" 1>&2
}

command=""

while [[ $# -gt 1 ]]
do
key="$1"

case $key in
    -h|--help)
        print_help
        break;
        ;;
    -n|--newcontract)
        newname="$2"
        command="newcontract"
        shift 2
        break
        ;;
    -o|--outname)
        outname="$2"
        command="outname"
        shift 2
        break
        ;;
    -g|--genabi)
        outname="$2"
        command="genabi"
        shift 2
        ;;
    *)
        echo "Unrecognized option: $1"
        exit 1
        ;;
esac
done

print_deprecation_notice

if [[ "outname" == "$command" ]]; then
    build_contract $@
elif [[ "newcontract" == "$command" ]]; then
    copy_skeleton
elif [[ "genabi" == "$command" ]]; then
    generate_abi $@
else
    print_help
    exit 1
fi
